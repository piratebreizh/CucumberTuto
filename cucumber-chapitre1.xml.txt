<?xml version="1.0" encoding="utf-8" ?>
<tutorial xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://leanforge.dev/tutorial https://github.com/HugoPoi/LeanForge/raw/master/xsd/tutotialschema.xsd">
<meta>
	<software id="cucumber">
		<name><![CDATA[Cucumber]]></name>
		<website href="http://cukes.info/"><![CDATA[Cucumber]]></website>
	</software>
		<languages>
			<codinglang>ruby</codinglang>
		</languages>
	<plateforms>windows</plateforms>
	<categories>
		<category>testing</category>
	</categories>
	<keywords><![CDATA[cucuber,tutoriel,installation,windows]]></keywords>
</meta>
<content lang="fr-FR">
    <title><![CDATA[Maîtriser Cucumber]]></title>
	<!--Installation de Cucumber  A DEFINIR -->
	<step name="Installation de Cucumber">
		<substep><text><![CDATA[
		Pour linux l'installation de Maven est relativement simple car un packet est présent sur les dépôts de la majorité des distributions.
		Cliquez sur le lien suivant : <a href="apt://maven">Maven via APT</a>
		]]>
		</text></substep>
		<substep><text><![CDATA[
		Si le lien ci-dessus ne fonctionne pas vous pouvez ouvrir un terminal et saisir : "apt-get install maven"
		]]></text></substep>
		<substep><text><![CDATA[
		Maintenant que vous avez installé Maven, vous pouvez dès à présent vérifier qu'il est fonctionnel en tappant dans un terminal : "mvn --version".
		Les lignes suivantes s'afficheront.
		]]></text></substep>
    </step>
    <!--Clement : Partie 1  Why Cucumber?-->
	<step name="Chapitre partie 1 - Why Cucumber?">
	<substep>
		<text>
			<b><![CDATA[1.0 Cucumber : Kesako ?]]></b></br>
			<![CDATA[
			Un soft part toujours d’une idée, une idée qui doit être expliquée par le maitre d’ouvrage et comprise par une équipe de développement. Le monde du logiciel, aujourd’hui, souffre d’une mauvaise communication entre ces deux parties, entrainant un 				écart entre le concept de base et l’application développée. </br> 			Nous avons donc besoin de filtres pour protéger le concept de l’application : c’est le premier rôle de Cucumber.</br>
			]]>
		</text>
	</substep>
	<substep>
		<text>
			<b><![CDATA[1.1 Tests d’acceptance]]></b></br>
			<![CDATA[
			Plutôt que d’exposer ses exigences à l’équipe de développement, méthode qui ne favorise pas le feedback au cours du projet, les parties prenantes et les développeurs collaborent pour écrire ensemble une batterie de tests qui répondent aux besoins 				précis du maitre d’ouvrage. Cela permet donc de se centrer sur ce qui est le plus important pour lui, ce qui doit être fait. On appelle ces tests « acceptance tests » car ils expriment ce que le soft a besoin de faire, dans l’ordre, pour être 				qualifié d’ « acceptable ».</br>
			Il faut bien faire la différence entre ces « acceptance tests » et les tests unitaires : ces derniers sont là pour aider le développeur à vérifier et valider leur application tandis que nos tests d’acceptance sont là pour diriger le projet. On dit 			que les tests unitaires servent à « build the thing right » (faire les choses bien) tandis que les « acceptances tests » servent à « build the right thing » (faire les bonnes choses).</br>
			]]>
		</text>
	</substep>
	<substep>
		<text>
			<b><![CDATA[1.2 BDD et Ubiquitous language]></b></br>
			<![CDATA[
			Le Behaviour Driven Development (BDD) dérive du TDD (Test Driven Development) en gardant les bonnes habitudes du développer TDD. Le but étant de créer des tests qui reflètent les attentes du maitre d’ouvrage, lisibles par n’importe qui. C’est alors 			qu’entre en jeu l’ « Ubiquitous language » (langage omniprésent).</br>
			Ce langage omniprésent part d’une idée : un projet trop souffre souvent d’un manque de  communication entre les experts et le développement. Ceci est principalement dut à la barrière du langage : les experts expriment vaguement ce qu’ils veulent, 				dans leur jargon, et les développeurs, essayant souvent de comprendre le domaine pour lequel ils doivent développer, comprennent vaguement ce qu’ils doivent faire.</br>
			Avec Cucumber, l’ « Ubiquitous language » peut être compris par n’importe qui impliqué dans le projet, quel que soit son domaine. Quand vous l’utilisez dans vos conversations, vos documentations et votre code, la barrière du langage n’est plus et 				les risques d’incompréhension sont considérablement réduits.</br>
			Les tests Cucumber interagissent directement avec le code produit, mais sont écrit dans un langage intermédiaire, que le maitre d’ouvrage peut comprendre. Cette collaboration permet de mettre le doigt sur les incompréhensions de l’équipe de 				développement bien avant qu’elles ne viennent polluer le code.
			]]>
		</text>
	</substep>
	<substep>
		<text>
			<b><![CDATA[1.3 Exemple du langage utilisé par Cucumber]></b></br>
			<![CDATA[
			Vous remarquerez à quel point ce langage décrit facilement ce que nous attendons du système. Cela permet donc, pour toutes les entités du projet, de visualiser le système avant qu’il ne soit construit. Ces tests d’acceptance deviennent alors des 				spécifications exécutables.</br>
			Les tests Cucumbers peuvent être écrits en 40 langages parlés différents. Vous pouvez également grouper vos scénarios en utilisant les tags.</br>
			Ces tests servent ainsi de documentation. Plutôt que d’écrire une doc qui devra être mise à jour continuellement dans le futur, ces tests d’acceptances deviennent une documentation vivante qui reflète réellement l’état du projet.</br>
			Les tests façon Cucumber permettent alors d’éviter de faire évoluer en même temps les documents, les tests et le code d’un projet classique. Les tests représentent alors une idée commune du projet, renforçant un esprit de confiance au sein de 				l’équipe, car personne n’a sa propre compréhension du soft.
			]]>
		</text>
	</substep>
	<substep>
		<text>
			<b><![CDATA[1.4 Fonctionnement]]></b></br>
			<![CDATA[
			Cucumber est un outil en ligne de commandes. Quand vous le lancez, il va lire dans vos spécifications chaque features qui contiennent les scénarios à tester. Chaque scénario contient une liste d’étapes à suivre. Donc, pour que Cucumber puisse 				comprendre vos scénarios, il  faut respecter un certain nombre de règles syntaxiques. L’ensemble de ces règles est appelées Gherkin, nous en parlerons dans le second chapitre.</br>
			Cucumber transforme le code « humain » (Ubiquitous language) en Ruby pour exécuter les tests dans votre système.</br>
			Si le test se termine sans erreur, Cucumber se rend à l’étape suivante du scénario. Si un scénario se termine avec une erreur, il l’affiche en précisant ce qui n’a pas marché et passe ensuite au scénario suivant.</br> 			Un test peux générer seulement deux ou trois lignes de code Ruby qui seront ensuite délégués à une librairie de support, selon le domaine de votre application.</br>
			]]>
		</text>
	</substep>
	
    	</step>
	<!-- Yohan : Partie 2 First Taste-->
    <step name="Partie 2 - First Taste">
		<substep><text>
			<![CDATA[
			Go to the configuration menu
			]]>
		</text></substep>
		<substep><text>
			<![CDATA[
			Configure this settings : .
			]]>
		</text></substep>
		<substep><text>
			<![CDATA[
			Then click on start button.
			]]>
		</text></substep>
    </step>
    <!-- Alex : Chapitre I partie  partie 3 Gherkin Basics-->
	<step name="Partie 3 - Gherkin Basics">
		<substep>
			<text>
			<![CDATA[Maintenant que vous avez acquis une certaine confiance dans la façon dont fonctionne Cucember. Nous allons regarder Gherkin, 
			le langage que nous utilisons pour écrire les fonctionnalités de Cucumber. À la fin de ce chapitre, vous allez comprendre comment écrire des 
			spécifications pour votre logiciel qui peut être à la fois lu par vos intervenants et testé par
			Cucumber. Vous apprendrez ce que chacun des mots clés de Gherkin fait et comment
			ils s'inscrivent tous ensemble pour être lisibles, comme des spécifications exécutables de Cucumber. Vous ne saurez pas
			encore comment faire fonctionner les tests, mais vous serez prêt à les écrire.]]>
			</text>
		</substep>
		<substep>
			<text>
			<b><![CDATA[3.1 Qu'est-ce Gherkin ?]]></b></br>
			<![CDATA[
			Nous construisons des logiciels pour les personnes (appelons-les parties prenantes), il est notoirement difficile de savoir exactement ce qu'ils veulent que nous construisons. Dans son célèbre essai, ‘pas de solution miracle, Fred Brooks’ dit: "La partie la plus difficile pour construire un système logiciel est de décider précisément ce qu'il faut construire".
			Nous avons tous travaillés sur des projets où, en raison d'un malentendu, le code
			sur lequel nous avions travaillé dur pendant plusieurs jours à dû être jeté.
			Une meilleure communication entre les développeurs et les parties prenantes est essentielle pour aider à éviter ce genre de perte de temps. Une technique qui aide réellement à faciliter 
			cette communication est l'utilisation d'exemples concrets pour illustrer ce que nous voulons
			que le logiciel fasse.
			]]>
			</text>
		</substep>
		<substep>
			<text>
			<b><![CDATA[3.1 Qu'est-ce Gherkin ?]]></b></br>
			<![CDATA[
			Nous construisons des logiciels pour les personnes (appelons-les parties prenantes), il est notoirement difficile de savoir exactement ce qu'ils veulent que nous construisons. Dans son célèbre essai, ‘pas de solution miracle, Fred Brooks’ dit: "La partie la plus difficile pour construire un système logiciel est de décider précisément ce qu'il faut construire".
			Nous avons tous travaillés sur des projets où, en raison d'un malentendu, le code
			sur lequel nous avions travaillé dur pendant plusieurs jours à dû être jeté.
			Une meilleure communication entre les développeurs et les parties prenantes est essentielle pour aider à éviter ce genre de perte de temps. Une technique qui aide réellement à faciliter 
			cette communication est l'utilisation d'exemples concrets pour illustrer ce que nous voulons
			que le logiciel fasse.
			]]>
			</br>
			<b><![CDATA[Exemples concrets : ]]></b>
			</br>
			<![CDATA[
			Nous voulons construire le comportement désiré du système en utilisant des exemples du monde réel, nous restons les pieds sur terre dans le langage et la terminologie qu’utilise nos partenaires: nous parlons leur langue. Quand nous parlons des termes utilisés dans les exemples, ils doivent vraiment s'imaginer utiliser le système.
			Discuter : signifie qu'ils peuvent commencer à nous donner des commentaires et suggestions utiles, avant qu’une seule ligne de code ne soit écrite.
			Pour illustrer cela, imaginons que vous deviez vous charger de la construction d'un système de paiement par carte de crédit.
			L'une des exigences est de s'assurer que les utilisateurs ne peuvent pas entrer des données erronées.
			]]>
			</br>
			<![CDATA[Voici une façon d'exprimer ce qui suit:]]>
			</br>
			<center><i><![CDATA[Les clients devraient être empêchés d'entrer des informations invalides de leur carte de crédit.]]></i></center>
			</br>
			<![CDATA[
			Ceci est un exemple de ce que les équipes agiles font souvent, ce sont des appels à des critères d'acceptation ou des conditions de satisfaction.
			Nous utilisons le mot acceptation parce qu'ils nous disent ce que le système doit être capable de faire pour que nos parties prenantes trouvent cette solution acceptable.
			La déclaration des exigences précédentes est utile, mais elle laisse beaucoup trop
			de place à l'ambiguïté et à l'incompréhension. Elle manque de précision. 
			Qu'est-ce qui fait exactement qu’un ensemble de détails est invalide ? Comment l'utilisateur doit être empêché d’y pénétrer? 
			Essayons d’illustrant cette exigence avec un exemple concret:
			Si un client entre un numéro de carte de crédit qui n'ai pas exactement 16 chiffres, quand
			il essayera de soumettre le formulaire, un message d'erreur doit l’avertir du nombre correct de chiffres à saisir. 
			Vous voyez comment cette deuxième déclaration est beaucoup plus spécifique? En tant que développeur nous devons être en mesure de commencer à travailler sur le code. En tant qu'acteur, nous avons une idée bien plus claire de ce que le développeur va construire.
			En fait, un acteur lisant cela pourrait souligner qu'il y a certains types de carte qui sont valides à moins de 16 chiffres et nous donnerons un autre exemple.
			]]>
			</br>
			<![CDATA[C'est le pouvoir réel des exemples:]]>
			</br>
			<![CDATA[Ils stimulent notre imagination, ce qui nous permet d’explorer et découvrir des cas plus particulier, que nous n’aurions peut-être trouvé beaucoup plus tard.
			En donnant un exemple pour illustrer notre exigence, nous avons tourné une acceptation
			critère dans un test d'acceptation. Maintenant, nous avons quelque chose sans ambiguïté que
			l’on peut utiliser pour tester le comportement du système, que ce soit manuellement ou à l'aide d'un script de test automatisé.
			]]>
			</br>
			<b><![CDATA[Spécifications exécutables]]></b>
			</br>
			<![CDATA[ ]]>
			<![CDATA[Ils stimulent notre imagination, ce qui nous permet d’explorer et découvrir des cas plus particulier, que nous n’aurions peut-être trouvé beaucoup plus tard.
			En donnant un exemple pour illustrer notre exigence, nous avons tourné une acceptation
			critère dans un test d'acceptation. Maintenant, nous avons quelque chose sans ambiguïté que
			l’on peut utiliser pour tester le comportement du système, que ce soit manuellement ou à l'aide d'un script de test automatisé.
			]]>
			</br>
			<![CDATA[Gherkin nous donne une structure légère pour documenter des exemples des comportements que désirent nos parties prenantes. 
			De manière à ce qu'ils puissent être facilement compris à la fois par les parties prenantes et par Cucumber. 
			Bien que Gherkin s’apparente à un langage de programmation, son but essentiel est la lisibilité humaine, ce qui signifie que vous pouvez écrire des tests automatisés qui se lisent comme une documentation. 
			]]>						
			</br>
			<b><![CDATA[Voici un exemple:]]></b>
			</br>
			<![CDATA[Feature : Commentaires lors de la saisie non valides des détails d’une carte de crédit

			Dans des tests utilisateurs, nous avons vu beaucoup de gens qui ont fait des erreurs en  entrant leur carte de crédit. Nous éviter de perdre des utilisateurs à ce stade crucial de la transaction.

			Contexte : 
			Given J'ai choisi quelques objets à acheter
			Et Je suis sur le point d'entrer les détails de ma carte de crédit

			Scenario: Numéro de carte de crédit trop court
				Quand J'entre un numéro de carte qui est à seulement 15 chiffres
				Et Tous les autres détails sont corrects
				Et Je soumets le formulaire
				Ensuite le formulaire doit être réaffichée
			Et Je dois voir un message m'avisant du nombre correct de chiffres à respecter

			Scenario: Date d'expiration invalide
				Quand J'entre une date d'expiration de carte qui est dépassée 
				Et Tous les autres détails sont corrects
				Et Je soumets le formulaire
				Ensuite Le formulaire doit être réaffichée
				Et Je verrais un message me disant la date d'expiration doit être mal
			]]>
			</br>
			<b><![CDATA[3.2 Format et syntaxe]]></b>
			</br>
			<![CDATA[
			Gherkin utilisent une extension de fichier simple. Ils sont enregistrés en tant que texte brut, ce qui signifie qu'ils peuvent être lus et modifiés avec des outils basique. 
			Un fichier Gherkin est donné par sa structure et sa signification en utilisant un ensemble de mots-clés spécifiques.
			Il existe un ensemble équivalent de ces mots clés dans chacun des supportée
			langues parlées, mais pour l'instant, nous allons jeter un oeil à ceux français:
			• Fonction
			• Contexte
			• Scenario
			• Compte tenu de
			• When
			• Ensuite
			• Et
			• Mais
			• Exemples
			Nous passerons le reste de ce chapitre à explorer comment utiliser les plus communs
			de ces mots-clés, ce qui sera suffisant pour vous aider à commencer à écrire votre propre
			]]>
			
			</text>
		</substep>
		<substep><text>
			<![CDATA[
			Then click on start button.
			]]>
		</text></substep>
    </step>
	<!-- Adil : Chapitre I partie 4 Step Definitions: From the Outside-->
    <step name="Partie 4 - Step Definitions: From the Outside">
		<substep><text>
			<![CDATA[
			Go to the configuration menu
			]]>
		</text></substep>
		<substep><text>
			<![CDATA[
			Configure this settings : .
			]]>
		</text></substep>
		<substep><text>
			<![CDATA[
			Then click on start button.
			]]>
		</text></substep>
    </step>
  </content>
</tutorial>